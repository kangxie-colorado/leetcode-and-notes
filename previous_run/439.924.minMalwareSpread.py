"""
https://leetcode.com/problems/minimize-malware-spread/?envType=study-plan&id=graph-ii

took me a minute to see that matrix is a graph

so this is what I am thinking
union-fine the connected nodes.. (via the matrix, it actually need to only work on the lower half)

then go thru the initial.. (can sort it to get the smallest index first)
for each one
    find its group set... 
        if more than one in initials.. it cannot be reducing the infected nodes 
        but it is the smallest in the group.. candidate it.
        also add the whole group into processed (so can just skip)

        if it is the only one in initials, removing it can remove the group size from infected..
        we can maxmize this 
"""


from collections import defaultdict
from typing import List


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        roots = [i for i in range(n)]

        def find(x):
            if roots[x] != x:
                roots[x] = find(roots[x])
            return roots[x]
        
        def union(x,y):
            roots[find(x)] = roots[find(y)]
        
        for i in range(n):
            for j in range(i):
                if graph[i][j]:
                    union(i,j)
        
        rootSet = defaultdict(set)
        for node in range(len(roots)):
            root = find(node)
            rootSet[root].add(node)
        
        initial.sort()
        initialSet = set(initial)
        processed = set()
        res1 = n # not gonna to decrease infected
        res2 = None # can decreasae infected
        decreaseMax = -1
        for ini in initial:
            if ini in processed:
                continue

            # find its own grp set and see how many nodes are also in initial
            root = find(ini)
            alsoInInitial = rootSet[root].intersection(initialSet)
            if len(alsoInInitial) > 1:
                res1 = min(res1, ini)
                # add the nodes in the same group to processed so I can skip 
                processed = processed.union(alsoInInitial)
            else:
                if len(rootSet[root]) > decreaseMax:
                    decreaseMax = len(rootSet[root])
                    res2 = ini
                processed.add(ini)
        
        if res2 is not None:
            return res2
        return res1

"""
Runtime: 1646 ms, faster than 78.10% of Python3 online submissions for Minimize Malware Spread.
Memory Usage: 16.7 MB, less than 51.24% of Python3 online submissions for Minimize Malware Spread.

Runtime: 1528 ms, faster than 97.93% of Python3 online submissions for Minimize Malware Spread.
Memory Usage: 16.8 MB, less than 51.24% of Python3 online submissions for Minimize Malware Spread.
"""

if __name__ == '__main__':
    s = Solution()
    print(s.minMalwareSpread(graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]))
    print(s.minMalwareSpread(graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]))
    print(s.minMalwareSpread(
        graph=[[1, 1, 1], [1, 1, 1], [1, 1, 1]], initial=[1, 2]))
