// https://leetcode.com/problems/count-nodes-with-the-highest-score/

/*
analysis

	this is basically computing the subtree sizes after removing a node
	we can use something similar to the union-find algortihm
	try to make it group by root

	e.g.
	parents = [-1,2,0,2,0]
	after removing node 0

subtree(node-removed, parents)
	subtreeSizes = []

	roots = []

	# now get the node grouped by parents
	for i:=0;i<len(parents);i++
		if node-removed == i:
			# myself removed, I should mark it obvious
			roots[i] = -1
		if parents[i] == -1:
			# change to self rooted
			roots[i] = i
		if parents[i] == node-removed:
			# my parent removed, I should become self-rooted
			roots[i] = i
		# at this time, it might not be eligible to finish all
		# e.g. the sub-sub-node appear before the parent node, whose parent in turn is removed...
		# it is hard to find all roots yet but next run we can finish it

	for i:=0;i<len(roots);i++
		if roots[i]==-1 # myself removed
			|| parents[i] == i # self rooted
			cont

		# actually this can happen in last loop
		# since it requires the knowledge of parents, not root...
		roots[i] = find(parents[i], parents)

	# now we have the roots
	# we can calculate the size
	# turn it into a map.. then count each map's size
	....

*/

package main

import "fmt"

func findRoot(n, p, removed int, parents []int) int {
	if p == -1 || p == removed {
		return n
	}

	return findRoot(p, parents[p], removed, parents)
}

func unionRoots(i, p, removed int, parents []int, roots []int) {
	root := findRoot(i, p, removed, parents)

	if parentCount[root] >= parentCount[i] {
		roots[i] = root
		parentCount[root]++
	} else {
		roots[root] = i
		parentCount[i]++
	}
}

func nodeScore(node int, parents []int) int {

	parentCount = make(map[int]int)
	for _, p := range parents {
		parentCount[p]++
	}

	roots := make([]int, len(parents))
	for i, p := range parents {

		if node == i {
			roots[i] = -1 // myself removed
			continue
		}

		if parents[i] == -1 || parents[i] == node {
			// myself is either a root or my parent is removed, then
			// my root is myself
			roots[i] = i
			continue
		}

		// otherwise, find my root
		roots[i] = findRoot(i, p, node, parents)

		//unionRoots(i, p, node, parents, roots)

	}

	m := make(map[int]int)
	for _, r := range roots {
		if r == -1 {
			continue
		}
		m[r]++
	}

	score := 1
	for _, v := range m {
		score *= v
	}

	return score
}

var parentCount map[int]int

func _1_countHighestScoreNodes(parents []int) int {

	highScore := 0
	highScoreCount := 0
	for i := 0; i < len(parents); i++ {
		score := nodeScore(i, parents)
		if score > highScore {
			highScore = score
			highScoreCount = 1
		} else if score == highScore {
			highScoreCount += 1
		}

	}

	return highScoreCount
}

/*
139 / 206 test cases passed.
Status: Time Limit Exceeded
Submitted: 0 minutes ago
Last executed input:
[-1,804,203,748,1098,453,1008,1091,1503,1040,434,77,454,429,1384,1147,1419,1493,1283,1497,1068,1015,1608,1398,392,1086,1436,1562,963,285,895,1210,876,937,267,497,1060,778,119,20,933,1386,1542,872,8,1445,1506,742,256,63,809,54,1277,327,1351,652,188,1346,1531,29,84,968,48,1063,1100,1174,282,348,348,1581,1390,21,86,1444,525,878,962,735,85,404,35,275,1125,1018,498,1329,1520,945,1649,1015,785,386,1382,1104,757,1333,0,675,1205,903,1628,1278,300,1523,1607,417,441,991,1301,1081,561,1103,1337,761,378,663,1292,970,969,1401,1218,783,1082,464,1332,1075,909,1137,264,45,844,971,314,324,869,1465,631,1265,1112,1350,1607,900,148,1124,19,1479,1554,1298,880,1450,721,1385,301,303,789,739,695,1489,689,334,605,1646,1562,777,943,917,636,1102,1372,1110,585,1377,295,1487,1070,887,492,1350,104,837,400,584,919,1364,1190,477,600,94,321,711,1061,1451,735,1078,827,254,508,1304,552,192,971,1645,1130,1073,1604,164,209,835,168,225,1564,682,1544,828,712,1232,646,730,1516,120,531,957,1155,1271,49,1134,1352,872,765,517,649,1311,1288,1647,272,248,1468,1269,352,104,1374,984,1231,732,345,1494,1504,1188,1193,1129,248,193,623,25,1024,581,1032,1384,1127,1121,665,61,767,1381,1539,705,394,1291,909,1478,1196,1108,1454,678,448,259,1538,1229,910,1553,81,294,763,468,1143,318,799,898,26,640,27,1642,230,470,551,701,1169,1194,935,734,1552,1016,774,51,681,1367,393,408,1348,412,500,874,1409,720,775,411,1274,529,1370,1145,625,232,178,393,691,730,1113,976,166,1627,552,118,79,380,332,592,366,1551,1218,1641,1292,1474,443,390,924,98,1496,877,1517,939,1033,245,590,816,1029,556,323,1009,431,1483,188,1094,377,959,1347,1087,352,1157,883,1326,1161,1032,62,1392,1228,291,719,1014,1542,1215,1308,710,617,659,1257,401,1326,1349,422,883,553,640,1244,698,866,426,455,846,1596,115,647,1323,1383,1287,60,917,634,1091,107,1052,1034,1098,1396,1137,710,1210,1421,1007,102,979,109,1389,249,290,178,1370,1501,957,1151,757,358,230,1441,1234,1569,828,802,275,1434,266,423,627,831,1391,171,1420,166,1175,1084,1623,1543,765,721,795,854,1160,1373,16,1409,1082,139,1372,803,368,404,136,73,879,1407,1382,1398,593,557,1088,1076,311,106,1324,259,938,1178,357,904,865,1397,1058,323,943,814,713,189,224,290,389,1563,1193,337,1349,351,1378,144,383,913,1498,43,206,1403,1361,22,1460,857,1213,559,920,56,392,65,824,1626,1160,370,373,539,191,885,1105,151,726,1163,1096,1050,254,762,1477,623,1528,170,118,1460,1019,780,782,1345,650,604,406,1039,1179,300,673,630,1436,1452,969,107,67,1270,766,289,283,1620,748,353,798,741,1295,477,628,1583,775,50,771,369,513,973,1148,1329,616,628,1353,257,631,880,656,595,733,990,813,1194,801,1442,488,945,172,904,360,1552,335,455,376,562,1414,973,237,599,1111,1195,74,245,389,1232,613,1605,217,1345,1559,906,111,96,1233,812,708,1305,250,1335,1040,1285,402,1181,1335,633,1320,174,617,1066,1405,355,975,903,498,1225,204,724,465,361,1543,1226,241,432,643,444,1095,481,125,1013,418,1285,1089,252,1355,840,1467,514,1505,995,79,695,1164,885,1511,163,1530,316,756,1638,525,1356,325,1344,777,1261,676,892,15,667,859,1296,90,1305,1118,1293,1646,1220,1503,114,86,469,176,158,75,65,1529,636,1216,213,1497,836,1138,482,501,76,733,1621,864,30,1419,346,24,11,638,900,580,769,71,784,207,1354,8,1595,645,483,294,204,787,359,357,852,205,1566,106,359,1201,1018,693,1635,577,372,1250,241,216,572,940,475,1139,181,1144,649,1565,381,671,746,1377,240,483,181,1462,941,1298,1601,335,980,1442,1176,1273,1009,1452,798,1633,1475,1007,132,1074,520,1431,444,728,1390,296,56,1279,237,814,955,975,588,629,1041,936,321,542,1173,642,1227,627,221,744,1451,1512,1262,912,326,1143,961,76,447,665,728,659,1525,24,908,202,495,902,1643,1260,1246,898,1020,229,58,1052,933,1448,835,334,201,1121,918,450,4,1577,1438,1163,720,1115,1313,506,754,1158,871,1054,1624,1402,651,1601,1461,214,364,1078,322,671,1005,589,1467,1643,968,375,693,95,58,437,929,1535,967,1048,377,165,382,907,694,762,154,19,1267,833,788,874,125,1565,80,1236,87,696,532,705,1264,384,725,894,1577,955,52,1444,818,1620,1244,1457,717,1249,1039,35,1114,1046,25,1383,836,1217,191,542,1520,1147,528,356,1596,602,1576,289,324,10,669,1602,1269,1445,1239,978,1312,1049,1353,1168,466,841,1374,709,1270,509,1066,1277,680,66,549,226,113,810,910,1590,1432,84,44,876,677,839,1312,1484,1624,1289,1249,1320,1629,666,1013,1112,232,136,750,817,1640,117,383,1011,1012,54,927,228,116,296,416,673,190,581,1253,977,162,1154,225,341,1540,1131,643,466,1280,1362,1162,305,1146,83,429,315,1203,549,339,295,102,692,988,269,1579,509,978,921,96,38,425,314,1499,1128,280,320,111,601,822,156,378,532,685,697,276,246,684,1590,815,1168,1125,1348,21,30,151,46,1612,167,473,1196,1463,1035,465,9,751,576,1337,478,570,641,684,450,374,497,198,1367,61,397,802,271,1418,1175,740,719,797,234,1031,499,447,859,972,1301,816,319,74,1106,1406,318,1161,639,1635,834,1035,1162,154,1212,881,1489,23,1245,691,1493,432,561,14,838,787,1310,1355,452,611,1264,425,616,354,1417,146,791,50,172,1432,791,1086,1225,342,1094,31,1031,1063,240,905,736,1585,936,265,1102,1532,1508,662,634,1450,985,869,1325,1629,1636,179,931,440,1380,1340,351,938,64,411,942,1050,1111,110,701,1156,638,1171,92,1587,1354,994,558,724,1284,1324,112,1220,596,492,1338,249,1598,1118,193,315,1546,1608,569,1019,1234,615,1411,75,128,1422,1279,1276,988,972,832,1138,461,647,771,1308,1545,1648,238,1615,1108,1574,1571,563,1459,1313,1342,704,1088,1558,1582,689,1428,207,1458,238,6,942,1227,114,661,1002,1341,688,622,772,495,1226,462,827,1651,1259,875,677,1071,520,80,1636,1075,1506,336,793,171,1530,846,82,1260,130,1064,169,1310,346,1233,117,864,142,1109,595,1002,1206,952,1219,1289,1338,637,1521,1554,441,924,1103,1441,1471,0,1418,1322,591,566,83,1304,786,834,614,1606,482,653,1524,182,515,987,586,141,355,641,1449,167,1,645,252,1257,1182,590,176,1405,1114,906,1020,1294,1499,414,1231,64,1189,626,190,98,448,951,162,1191,1073,591,223,786,1571,1129,1502,203,851,984,824,470,896,16,48,73,1065,1454,159,585,70,896,1429,1645,584,1294,1144,1494,994,476,1213,1309,615,897,1126,297,213,403,28,766,149,161,1480,1515,10,652,17,633,1541,261,1509,491,1352,1011,1621,713,675,1058,1391,897,1501,810,405,1189,1343,889,211,831,360,653,1026,153,158,916,923,554,1476,1597,68,1529,1433,1134,1439,516,46,1531,161,133,1528,1165,923,951,72,1488,454,1488,367,1449,920,596,1505,892,226,168,989,1135,1176,1351,1230,1600,970,13,1174,201,1286,1525,977,687,280,614,1297,624,1524,1425,1333,889,697,196,1342,764,471,1637,97,1113,1572,785,960,1219,997,853,269,336,1151,739,202,922,407,1288,639,1017,1314,1479,87,517,1097,316,571,1595,332,527,1230,1122,156,224,1140,1246,305,650,1428,160,60,1135,912,70,253,593,165,491,1604,1541,1318,474,544,311,521,929,1583,489,11,1048,1205,214,1361,568,97,27,219,313,1373,685,3,797,609,1171,1496,694,1411,123,1045,422,195,1423,1157,1588,1544,1217,613,580,837,1180,773,1045,574,272,1640,985,844,862,527,1438,692,1183,443,1473,758,1642,609,1614,706,712,669,698,1252,376,340,1169,1049,45,1606,1110,1186,1478,137,1167,442,519,866,1484,211,947,1072,1130,217,1141,257,1254,776,722,1146,1389,726,349,725,729,839,1303,1247,506,556,1104,1585,1095,3,1470,199,830,756,1430,1254,481,740,518,881,153,423,1314,1448,1561,127,493,515,784,303,198,1387,1401,519,1569,251,1156,651,1343,142,478,1572,941,1615,384,313,1206,1433,551,413,919,1170,817]
>>> len(a)
1652

141 / 206 test cases passed.
Status: Time Limit Exceeded
Submitted: 0 minutes ago
Last executed input:
[-1,1691,856,1532,850,332,1347,1056,303,64,1245,669,1279,516,507,1430,1682,41,362,149,357,655,1648,173,1292,1330,1760,1088,296,907,1315,422,816,1759,160,147,811,1726,399,1733,633,465,271,733,189,761,749,113,339,792,171,500,1321,1259,485,634,598,956,73,1624,525,637,658,1264,572,466,1728,774,185,1345,808,203,158,886,220,1433,1166,1494,1526,215,131,820,1095,1033,5,1371,1688,382,1490,1719,820,693,454,253,724,21,1467,731,1067,1674,155,1283,1625,1427,767,179,1680,715,1717,924,673,406,631,1453,1458,1270,6,422,904,933,222,1258,1487,1683,1654,933,1352,237,1284,361,1108,1554,1081,239,289,1277,1136,231,647,1454,925,448,478,1705,1624,1079,1389,1498,740,630,576,258,1308,1202,1380,1151,645,1153,541,857,1402,290,1577,1291,853,1093,336,1187,584,1642,633,301,1397,940,521,323,672,140,1257,821,1081,1209,205,1391,508,738,1119,1169,392,800,315,1204,440,1638,358,772,1666,23,1670,196,1028,848,539,1308,1756,1551,523,756,723,403,1580,273,636,691,83,786,776,1722,1017,1680,734,1326,914,333,479,311,1640,801,367,1145,627,655,646,944,937,270,558,1738,698,217,1302,1112,528,1109,403,55,125,590,494,876,505,568,1075,1530,1094,247,251,318,831,164,180,314,944,467,595,396,1091,3,986,1638,1118,1256,1316,616,547,875,1707,226,284,1757,681,111,317,669,973,869,159,413,1577,1564,1087,48,537,1543,336,964,415,43,500,830,446,128,174,728,157,188,1633,470,932,426,327,642,743,1023,1396,1204,50,922,435,289,1662,1244,1130,641,411,1672,516,683,1053,896,1319,1451,1158,278,1542,49,342,459,222,484,936,1604,1761,100,520,1018,106,533,946,218,1148,1180,694,88,232,19,1602,18,572,1123,624,1213,218,288,397,762,1153,684,89,1610,194,156,373,491,1411,1276,906,979,672,95,619,263,63,1701,467,354,1043,1394,728,1525,1257,1460,1219,8,895,378,204,1041,306,1070,161,685,503,755,1572,1520,154,1419,477,63,461,0,1745,890,1271,207,718,303,532,1675,1244,1332,135,349,357,1128,98,897,1108,1340,515,889,107,495,1314,418,1586,1559,1112,1492,699,661,420,1621,658,743,771,756,479,308,1338,1317,1736,167,1654,551,903,149,795,1185,1643,585,1234,715,1766,1140,1064,1576,1386,1176,1273,997,1729,546,1687,951,224,1759,566,1280,789,490,866,118,196,1138,1049,1580,1072,1335,309,967,644,735,787,330,259,1063,243,1066,1160,869,252,176,674,1444,590,1167,1604,62,1671,32,971,496,1457,1705,1673,1220,1111,1342,698,1582,733,393,1173,541,1247,1080,1183,1336,1049,1188,13,1506,804,926,611,1716,376,478,1493,254,243,842,1082,786,1318,351,122,404,1756,1073,542,1459,447,1178,143,1128,816,481,1302,1030,1216,878,527,1262,1412,1341,197,991,1418,1548,262,1744,1440,1369,1156,1175,1099,1294,803,1384,1723,835,699,90,302,686,642,40,1667,326,730,721,1038,1611,141,1687,1417,114,1709,821,702,1444,1461,580,1332,1454,1738,979,409,1603,783,950,1515,1637,1730,1218,844,1347,680,134,1746,1346,777,1515,359,1658,1027,1650,1208,692,1191,1122,1359,980,160,1013,1239,887,836,1755,634,418,6,235,1142,1445,1369,77,582,1282,331,1075,33,395,1466,316,1526,860,321,691,1655,1679,439,894,261,190,1456,1669,622,12,872,233,1235,420,1739,506,1282,36,330,799,1472,1017,355,212,154,712,1439,180,1110,675,43,502,204,1377,1718,1313,939,1213,1443,327,579,540,489,1262,1243,1382,262,1349,1671,256,1394,1505,1315,378,192,1711,1026,1673,603,199,983,538,1574,146,1216,833,12,106,800,445,1421,490,1513,1456,1074,1037,1706,1148,484,1630,16,582,480,207,770,1692,385,1138,440,1578,498,623,1220,665,1208,395,875,1083,1265,906,1615,1197,664,1034,513,324,117,1613,550,71,1343,125,414,1041,146,1684,476,1553,871,930,1094,719,1212,640,1277,168,1374,570,1269,4,368,404,99,564,670,510,913,62,65,1513,1391,438,1441,920,1121,1021,1711,1288,213,828,417,863,693,57,1426,862,411,309,142,84,10,116,281,1491,1197,640,1425,967,675,1383,588,735,792,1131,1501,1714,978,1245,1483,1690,492,556,398,629,266,1125,1765,890,1293,388,898,1730,1184,594,432,754,116,964,819,513,239,499,1606,2,417,137,1395,1251,338,602,1068,926,396,401,1123,781,363,826,150,176,1239,1402,662,1428,776,94,1696,1059,464,986,145,1512,616,1427,168,700,548,1715,650,1396,929,553,943,1540,519,958,965,842,1326,246,170,575,898,1733,534,1333,124,1201,883,843,718,925,1096,594,1512,1226,102,88,1328,423,1031,193,367,829,1098,956,1337,539,1549,1309,199,1589,1357,1233,1634,341,1471,897,1337,1735,746,1224,872,258,388,360,653,1768,68,32,1571,1166,162,1641,1149,186,1287,1403,666,1046,1242,252,1386,1301,1061,1215,847,305,1712,710,1231,329,902,545,517,353,1724,981,1741,1192,575,265,444,1352,449,588,502,730,1134,1536,1672,1058,1111,1633,912,224,808,152,59,1746,619,1627,676,783,1141,1118,1113,644,517,1119,276,11,1321,1200,1473,757,1719,1045,1421,1635,1314,635,1521,1655,167,1,593,1741,1535,523,1199,1156,555,1043,1304,717,1000,547,703,1027,764,838,1562,819,825,1202,1026,829,506,1044,1343,1551,1455,746,917,1073,1563,424,1124,912,1390,0,231,1350,1675,1422,200,665,630,854,348,435,686,1099,1651,1207,1381,769,471,851,720,1228,1543,1133,916,737,958,1557,1462,1596,1681,317,578,1168,1582,1246,356,985,186,282,810,1548,1697,457,1460,366,914,635,1203,108,1064,1549,1576,917,574,617,981,818,122,1135,482,139,1336,569,78,734,1185,397,549,98,1490,1055,123,322,624,1611,1359,1007,1698,178,145,1275,1272,304,1487,1341,206,1617,760,1095,1196,1566,1640,460,1182,940,1269,232,557,505,350,1469,953,1334,1255,1642,519,340,1109,1707,1503,690,476,545,1645,678,1120,103,1720,383,1136,133,1464,1110,325,721,772,1722,1379,1714,273,278,1712,1240,976,1011,1589,729,1600,1727,1152,828,841,442,1557,68,1226,486,495,233,5,729,1588,1734,1130,701,637,1664,170,202,370,105,664,832,660,294,852,551,4,131,1221,1357,978,1603,823,402,1258,1511,1177,426,1702,524,707,1488,564,1615,990,356,805,482,211,1649,805,349,434,1565,473,1601,785,171,1104,1518,1278,1412,13,760,504,908,429,720,1180,931,1289,586,1184,316,1614,1488,593,571,464,142,889,750,822,608,1048,677,659,481,1051,924,804,445,462,1287,1588,1068,72,1519,1008,1129,1622,1142,1493,1702,1222,782,901,290,1508,1194,1284,1600,1750,1381,542,1319,1478,1211,1619,358,1380,94,908,1150,248,1053,527,825,1286,1423,1370,901,1453,33,23,1134,143,119,1174,759,1176,663,714,162,701,1320,1171,671,334,678,797,684,727,802,1755,1431,1318,1327,182,742,879,1225,1263,614,530,368,767,1382,1418,194,536,1192,1280,1172,27,1431,120,1113,1415,763,571,707,1088,353,95,858,1355,1355,1334,1481,753,579,416,302,1366,1752,1368,1281,1058,437,620,198,823,843,1650,1698,935,1723,1704,566,1648,1703,798,578,988,1350,1590,1305,1299,1635,1286,1307,617,859,1533,493,1664,521,72,731,1555,1667,1235,293,217,123,407,1571,1729,1289,1524,414,492,373,1080,991,1102,69,916,814,332,677,1645,1405,1312,78,67,253,1504,1264,345,254,1469,274,1024,364,471,1441,833,688,1450,1417,1587,1293,197,319,1704,1385,1079,8,1473,73,1768,469,511,1231,97,1524,888,1320,1129,1538,1305,600,1158,134,1225,895,1067,830,1448,935,1309,1313,65,114,470,777,163,607,1335,112,1761,1367,216,1657,379,514,1434,1182,955,740,555,7,648,1022,394,711,1275,345,1683,1605,191,338,1405,762,893,510,615,1398,894,1234,1232,1572,1092,688,1544,866,522,1224,1735,135,941,50,1006,1120,1339,1666,779,210,1104,1000,985,1168,1215,1411,1018,1346,836,184,497,1047,1333,826,1602,1207,267,1574,980,1223,37,108,1012,604,773,918,1251,493,1028,973,1501,274,942,1171,1132,124,1044,1468,29,475,374,1178,1681,431,727,365,1651,732,661,603,1011,439,408,206,1083,210,436,1410,802,992,1518,782,953,1106,1281,1181,363,1661,887,235,1340,489,1545,1272,1623,1304,1710,778,892,1430,84,648,943,405,739,341,441,269,463,1351,719,1669,1385,1008,144,548,200,646,248,284,622,1174,1644,1762,1054,1464,1682,1693,179,83,486,1048,535,1701,169,705,321,102,1096,1553,1092,1691,192,606,21,1165,1246,105,610,1426,247,550,423,1661,1288,244,16,494,1199,694,99,1370,45,997,1035,710,702,499,213,1219,1393,1415,708,431,36,1565,1393,515,801,857,1601,534,1345,841,1425,876,990,1703,308,1662,1152,79,532,680,1331,379,954,399,1563,570,283,475,832,1329,1731,307,988,1368,724,1560,660,1458,900,653,1348]
>>> len(a)
1769

so it could be logically right but time is not okay
possibly the optimization is union by rank

or turn the binary tree to a balanced tree... nah.......

another observation
this is a binary tree...

so removing a leaf node.. it will be the biggest subtree left.. for sure
one exception is when root has only one child...

how to find the leafs..
it is not any parent then it is leafs...

wow...
nah.. not right

if n=6, remove a leaf is 5
but if there is a 2*3 it is 6

so maybe still the union by rank..


136 / 206 test cases passed.
Status: Wrong Answer
Submitted: 0 minutes ago
Input:
[-1,2,0,1,1,7,5,0]
Output:
1
Expected:
2

aha... when re-assign the roots[root] = i.. the issue is what happen to those nodes that are root's children, they don't get updated
okay..

then I think just caculate the immediate parent then use union find... try again
hmm... not any room to see improvement

then check out the hints
For each node, you need to find the sizes of the subtrees rooted in each of its children. Maybe DFS?
How to determine the number of nodes in the rest of the tree? Can you subtract the size of the subtree rooted at the node from the total number of nodes of the tree?
Use these values to compute the score of the node. Track the maximum score, and how many nodes achieve such score.

aha...

yes, I only need to calculate the subtree of myself
then subtract to get the rest tree

ahha... dfs it is



*/

func treeSize(p int, parentToChildren map[int][]int) int {
	if v, found := treeSizeMap[p]; found {
		return v
	}

	size := 1

	if chlds, found := parentToChildren[p]; found {
		// if it is a parent afterall
		// otherwise, it returns 0 automatically
		for _, c := range chlds {
			size += treeSize(c, parentToChildren)
		}
	}

	treeSizeMap[p] = size

	return size
}

func nodeScore2(total, n int, parentToChildren map[int][]int) int {
	sizes := []int{}
	if chlds, found := parentToChildren[n]; !found {
		// leafs
		return total - 1
	} else {
		totalSubtreesSize := 0
		for _, c := range chlds {
			subtreeSize := treeSize(c, parentToChildren)
			sizes = append(sizes, subtreeSize)
			totalSubtreesSize += subtreeSize
		}
		if totalSubtreesSize != total-1 {
			sizes = append(sizes, total-1-totalSubtreesSize)
		}

	}

	score := 1
	for _, s := range sizes {
		score *= s
	}
	return score
}

// because the node are 0..n-1, so no duplicates to worry
var treeSizeMap map[int]int

func countHighestScoreNodes(parents []int) int {

	treeSizeMap = make(map[int]int)
	parentToChildren := make(map[int][]int)
	for i, p := range parents[0:] {
		if p == -1 {
			continue
		}
		parentToChildren[p] = append(parentToChildren[p], i)
	}

	//fmt.Println(parentToChildren)

	highScore := 0
	highScoreCount := 0
	for i := 0; i < len(parents); i++ {
		score := nodeScore2(len(parents), i, parentToChildren)
		if score > highScore {
			highScore = score
			highScoreCount = 1
		} else if score == highScore {
			highScoreCount += 1
		}

	}

	return highScoreCount
}

/*


156 / 206 test cases passed.
Status: Time Limit Exceeded
Submitted: 0 minutes ago
Last executed input:

repeated computing of tree size.. which can be memorized

Success
Details
Runtime: 394 ms, faster than 22.22% of Go online submissions for Count Nodes With the Highest Score.
Memory Usage: 31.5 MB, less than 25.93% of Go online submissions for Count Nodes With the Highest Score.


okay I see where my inefficiency is

func countHighestScoreNodes(parents []int) (ans int) {
    maxScore, n, graph := int64(0), len(parents), map[int][]int{}
    for i := 1; i < n; i++ {
        graph[parents[i]] = append(graph[parents[i]], i)
    }

    var dfs func(node int) int
    dfs = func(node int) int {
        left, right := 0, 0
        children := graph[node]
        if len(children) > 0 {
            left = dfs(children[0])
            if len(children) > 1 {
                right = dfs(children[1])
            }
        }
        if score := max(left, 1) * max(right, 1) * max(n - 1 - left - right, 1); score > maxScore {
            maxScore, ans = score, 1
        } else if score == maxScore {
            ans++
        }
        return left + right + 1
    }
    dfs(0)
    return ans
}

func max(a, b int) int64 {
    if a > b {
        return int64(a)
    }
    return int64(b)
}


compare to this
you only need to go thru the tree once.. and calculate all the scores
but instead I cut off a node... calculate the score (the subtress)
then cut off another... so many unnecessary calculations

the optimization is you can only walk one pass of the tree
and at any given node, you can calculate its subtree sizes and get a score..

it is also in parallel with walking the tree... so delicate..


*/

func testCountHighestScoreNodes() {
	fmt.Println(countHighestScoreNodes([]int{-1, 2, 0, 2, 0}))
	fmt.Println(countHighestScoreNodes([]int{-1, 2, 0}))
	fmt.Println(countHighestScoreNodes([]int{-1, 2, 0, 1, 1, 7, 5, 0}))
	fmt.Println(countHighestScoreNodes([]int{-1, 804, 203, 748, 1098, 453, 1008, 1091, 1503, 1040, 434, 77, 454, 429, 1384, 1147, 1419, 1493, 1283, 1497, 1068, 1015, 1608, 1398, 392, 1086, 1436, 1562, 963, 285, 895, 1210, 876, 937, 267, 497, 1060, 778, 119, 20, 933, 1386, 1542, 872, 8, 1445, 1506, 742, 256, 63, 809, 54, 1277, 327, 1351, 652, 188, 1346, 1531, 29, 84, 968, 48, 1063, 1100, 1174, 282, 348, 348, 1581, 1390, 21, 86, 1444, 525, 878, 962, 735, 85, 404, 35, 275, 1125, 1018, 498, 1329, 1520, 945, 1649, 1015, 785, 386, 1382, 1104, 757, 1333, 0, 675, 1205, 903, 1628, 1278, 300, 1523, 1607, 417, 441, 991, 1301, 1081, 561, 1103, 1337, 761, 378, 663, 1292, 970, 969, 1401, 1218, 783, 1082, 464, 1332, 1075, 909, 1137, 264, 45, 844, 971, 314, 324, 869, 1465, 631, 1265, 1112, 1350, 1607, 900, 148, 1124, 19, 1479, 1554, 1298, 880, 1450, 721, 1385, 301, 303, 789, 739, 695, 1489, 689, 334, 605, 1646, 1562, 777, 943, 917, 636, 1102, 1372, 1110, 585, 1377, 295, 1487, 1070, 887, 492, 1350, 104, 837, 400, 584, 919, 1364, 1190, 477, 600, 94, 321, 711, 1061, 1451, 735, 1078, 827, 254, 508, 1304, 552, 192, 971, 1645, 1130, 1073, 1604, 164, 209, 835, 168, 225, 1564, 682, 1544, 828, 712, 1232, 646, 730, 1516, 120, 531, 957, 1155, 1271, 49, 1134, 1352, 872, 765, 517, 649, 1311, 1288, 1647, 272, 248, 1468, 1269, 352, 104, 1374, 984, 1231, 732, 345, 1494, 1504, 1188, 1193, 1129, 248, 193, 623, 25, 1024, 581, 1032, 1384, 1127, 1121, 665, 61, 767, 1381, 1539, 705, 394, 1291, 909, 1478, 1196, 1108, 1454, 678, 448, 259, 1538, 1229, 910, 1553, 81, 294, 763, 468, 1143, 318, 799, 898, 26, 640, 27, 1642, 230, 470, 551, 701, 1169, 1194, 935, 734, 1552, 1016, 774, 51, 681, 1367, 393, 408, 1348, 412, 500, 874, 1409, 720, 775, 411, 1274, 529, 1370, 1145, 625, 232, 178, 393, 691, 730, 1113, 976, 166, 1627, 552, 118, 79, 380, 332, 592, 366, 1551, 1218, 1641, 1292, 1474, 443, 390, 924, 98, 1496, 877, 1517, 939, 1033, 245, 590, 816, 1029, 556, 323, 1009, 431, 1483, 188, 1094, 377, 959, 1347, 1087, 352, 1157, 883, 1326, 1161, 1032, 62, 1392, 1228, 291, 719, 1014, 1542, 1215, 1308, 710, 617, 659, 1257, 401, 1326, 1349, 422, 883, 553, 640, 1244, 698, 866, 426, 455, 846, 1596, 115, 647, 1323, 1383, 1287, 60, 917, 634, 1091, 107, 1052, 1034, 1098, 1396, 1137, 710, 1210, 1421, 1007, 102, 979, 109, 1389, 249, 290, 178, 1370, 1501, 957, 1151, 757, 358, 230, 1441, 1234, 1569, 828, 802, 275, 1434, 266, 423, 627, 831, 1391, 171, 1420, 166, 1175, 1084, 1623, 1543, 765, 721, 795, 854, 1160, 1373, 16, 1409, 1082, 139, 1372, 803, 368, 404, 136, 73, 879, 1407, 1382, 1398, 593, 557, 1088, 1076, 311, 106, 1324, 259, 938, 1178, 357, 904, 865, 1397, 1058, 323, 943, 814, 713, 189, 224, 290, 389, 1563, 1193, 337, 1349, 351, 1378, 144, 383, 913, 1498, 43, 206, 1403, 1361, 22, 1460, 857, 1213, 559, 920, 56, 392, 65, 824, 1626, 1160, 370, 373, 539, 191, 885, 1105, 151, 726, 1163, 1096, 1050, 254, 762, 1477, 623, 1528, 170, 118, 1460, 1019, 780, 782, 1345, 650, 604, 406, 1039, 1179, 300, 673, 630, 1436, 1452, 969, 107, 67, 1270, 766, 289, 283, 1620, 748, 353, 798, 741, 1295, 477, 628, 1583, 775, 50, 771, 369, 513, 973, 1148, 1329, 616, 628, 1353, 257, 631, 880, 656, 595, 733, 990, 813, 1194, 801, 1442, 488, 945, 172, 904, 360, 1552, 335, 455, 376, 562, 1414, 973, 237, 599, 1111, 1195, 74, 245, 389, 1232, 613, 1605, 217, 1345, 1559, 906, 111, 96, 1233, 812, 708, 1305, 250, 1335, 1040, 1285, 402, 1181, 1335, 633, 1320, 174, 617, 1066, 1405, 355, 975, 903, 498, 1225, 204, 724, 465, 361, 1543, 1226, 241, 432, 643, 444, 1095, 481, 125, 1013, 418, 1285, 1089, 252, 1355, 840, 1467, 514, 1505, 995, 79, 695, 1164, 885, 1511, 163, 1530, 316, 756, 1638, 525, 1356, 325, 1344, 777, 1261, 676, 892, 15, 667, 859, 1296, 90, 1305, 1118, 1293, 1646, 1220, 1503, 114, 86, 469, 176, 158, 75, 65, 1529, 636, 1216, 213, 1497, 836, 1138, 482, 501, 76, 733, 1621, 864, 30, 1419, 346, 24, 11, 638, 900, 580, 769, 71, 784, 207, 1354, 8, 1595, 645, 483, 294, 204, 787, 359, 357, 852, 205, 1566, 106, 359, 1201, 1018, 693, 1635, 577, 372, 1250, 241, 216, 572, 940, 475, 1139, 181, 1144, 649, 1565, 381, 671, 746, 1377, 240, 483, 181, 1462, 941, 1298, 1601, 335, 980, 1442, 1176, 1273, 1009, 1452, 798, 1633, 1475, 1007, 132, 1074, 520, 1431, 444, 728, 1390, 296, 56, 1279, 237, 814, 955, 975, 588, 629, 1041, 936, 321, 542, 1173, 642, 1227, 627, 221, 744, 1451, 1512, 1262, 912, 326, 1143, 961, 76, 447, 665, 728, 659, 1525, 24, 908, 202, 495, 902, 1643, 1260, 1246, 898, 1020, 229, 58, 1052, 933, 1448, 835, 334, 201, 1121, 918, 450, 4, 1577, 1438, 1163, 720, 1115, 1313, 506, 754, 1158, 871, 1054, 1624, 1402, 651, 1601, 1461, 214, 364, 1078, 322, 671, 1005, 589, 1467, 1643, 968, 375, 693, 95, 58, 437, 929, 1535, 967, 1048, 377, 165, 382, 907, 694, 762, 154, 19, 1267, 833, 788, 874, 125, 1565, 80, 1236, 87, 696, 532, 705, 1264, 384, 725, 894, 1577, 955, 52, 1444, 818, 1620, 1244, 1457, 717, 1249, 1039, 35, 1114, 1046, 25, 1383, 836, 1217, 191, 542, 1520, 1147, 528, 356, 1596, 602, 1576, 289, 324, 10, 669, 1602, 1269, 1445, 1239, 978, 1312, 1049, 1353, 1168, 466, 841, 1374, 709, 1270, 509, 1066, 1277, 680, 66, 549, 226, 113, 810, 910, 1590, 1432, 84, 44, 876, 677, 839, 1312, 1484, 1624, 1289, 1249, 1320, 1629, 666, 1013, 1112, 232, 136, 750, 817, 1640, 117, 383, 1011, 1012, 54, 927, 228, 116, 296, 416, 673, 190, 581, 1253, 977, 162, 1154, 225, 341, 1540, 1131, 643, 466, 1280, 1362, 1162, 305, 1146, 83, 429, 315, 1203, 549, 339, 295, 102, 692, 988, 269, 1579, 509, 978, 921, 96, 38, 425, 314, 1499, 1128, 280, 320, 111, 601, 822, 156, 378, 532, 685, 697, 276, 246, 684, 1590, 815, 1168, 1125, 1348, 21, 30, 151, 46, 1612, 167, 473, 1196, 1463, 1035, 465, 9, 751, 576, 1337, 478, 570, 641, 684, 450, 374, 497, 198, 1367, 61, 397, 802, 271, 1418, 1175, 740, 719, 797, 234, 1031, 499, 447, 859, 972, 1301, 816, 319, 74, 1106, 1406, 318, 1161, 639, 1635, 834, 1035, 1162, 154, 1212, 881, 1489, 23, 1245, 691, 1493, 432, 561, 14, 838, 787, 1310, 1355, 452, 611, 1264, 425, 616, 354, 1417, 146, 791, 50, 172, 1432, 791, 1086, 1225, 342, 1094, 31, 1031, 1063, 240, 905, 736, 1585, 936, 265, 1102, 1532, 1508, 662, 634, 1450, 985, 869, 1325, 1629, 1636, 179, 931, 440, 1380, 1340, 351, 938, 64, 411, 942, 1050, 1111, 110, 701, 1156, 638, 1171, 92, 1587, 1354, 994, 558, 724, 1284, 1324, 112, 1220, 596, 492, 1338, 249, 1598, 1118, 193, 315, 1546, 1608, 569, 1019, 1234, 615, 1411, 75, 128, 1422, 1279, 1276, 988, 972, 832, 1138, 461, 647, 771, 1308, 1545, 1648, 238, 1615, 1108, 1574, 1571, 563, 1459, 1313, 1342, 704, 1088, 1558, 1582, 689, 1428, 207, 1458, 238, 6, 942, 1227, 114, 661, 1002, 1341, 688, 622, 772, 495, 1226, 462, 827, 1651, 1259, 875, 677, 1071, 520, 80, 1636, 1075, 1506, 336, 793, 171, 1530, 846, 82, 1260, 130, 1064, 169, 1310, 346, 1233, 117, 864, 142, 1109, 595, 1002, 1206, 952, 1219, 1289, 1338, 637, 1521, 1554, 441, 924, 1103, 1441, 1471, 0, 1418, 1322, 591, 566, 83, 1304, 786, 834, 614, 1606, 482, 653, 1524, 182, 515, 987, 586, 141, 355, 641, 1449, 167, 1, 645, 252, 1257, 1182, 590, 176, 1405, 1114, 906, 1020, 1294, 1499, 414, 1231, 64, 1189, 626, 190, 98, 448, 951, 162, 1191, 1073, 591, 223, 786, 1571, 1129, 1502, 203, 851, 984, 824, 470, 896, 16, 48, 73, 1065, 1454, 159, 585, 70, 896, 1429, 1645, 584, 1294, 1144, 1494, 994, 476, 1213, 1309, 615, 897, 1126, 297, 213, 403, 28, 766, 149, 161, 1480, 1515, 10, 652, 17, 633, 1541, 261, 1509, 491, 1352, 1011, 1621, 713, 675, 1058, 1391, 897, 1501, 810, 405, 1189, 1343, 889, 211, 831, 360, 653, 1026, 153, 158, 916, 923, 554, 1476, 1597, 68, 1529, 1433, 1134, 1439, 516, 46, 1531, 161, 133, 1528, 1165, 923, 951, 72, 1488, 454, 1488, 367, 1449, 920, 596, 1505, 892, 226, 168, 989, 1135, 1176, 1351, 1230, 1600, 970, 13, 1174, 201, 1286, 1525, 977, 687, 280, 614, 1297, 624, 1524, 1425, 1333, 889, 697, 196, 1342, 764, 471, 1637, 97, 1113, 1572, 785, 960, 1219, 997, 853, 269, 336, 1151, 739, 202, 922, 407, 1288, 639, 1017, 1314, 1479, 87, 517, 1097, 316, 571, 1595, 332, 527, 1230, 1122, 156, 224, 1140, 1246, 305, 650, 1428, 160, 60, 1135, 912, 70, 253, 593, 165, 491, 1604, 1541, 1318, 474, 544, 311, 521, 929, 1583, 489, 11, 1048, 1205, 214, 1361, 568, 97, 27, 219, 313, 1373, 685, 3, 797, 609, 1171, 1496, 694, 1411, 123, 1045, 422, 195, 1423, 1157, 1588, 1544, 1217, 613, 580, 837, 1180, 773, 1045, 574, 272, 1640, 985, 844, 862, 527, 1438, 692, 1183, 443, 1473, 758, 1642, 609, 1614, 706, 712, 669, 698, 1252, 376, 340, 1169, 1049, 45, 1606, 1110, 1186, 1478, 137, 1167, 442, 519, 866, 1484, 211, 947, 1072, 1130, 217, 1141, 257, 1254, 776, 722, 1146, 1389, 726, 349, 725, 729, 839, 1303, 1247, 506, 556, 1104, 1585, 1095, 3, 1470, 199, 830, 756, 1430, 1254, 481, 740, 518, 881, 153, 423, 1314, 1448, 1561, 127, 493, 515, 784, 303, 198, 1387, 1401, 519, 1569, 251, 1156, 651, 1343, 142, 478, 1572, 941, 1615, 384, 313, 1206, 1433, 551, 413, 919, 1170, 817}))
}
